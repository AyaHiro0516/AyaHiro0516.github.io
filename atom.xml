<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AYAHIRO&#39;S BLOG</title>
  
  <subtitle>Nothing fxck you harder than time.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-25T17:39:37.371Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ayahiro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之访问者模式和中介者模式</title>
    <link href="http://yoursite.com/2019/07/25/mediator-visitor/"/>
    <id>http://yoursite.com/2019/07/25/mediator-visitor/</id>
    <published>2019-07-25T11:18:19.868Z</published>
    <updated>2019-07-25T17:39:37.371Z</updated>
    
    <content type="html"><![CDATA[<p>上次学了解释器模式和迭代器模式，都不是用得很多，而且都比较好理解，就不水博客了</p><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p><strong>描述：封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。</strong></p><p><img src="/2019/07/25/mediator-visitor/访问者模式.png" alt="访问者模式"><br><a id="more"></a></p><p>访问者模式的目的是要把处理从数据结构分离出来，有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式是合适的，因为它使得算法操作的增加变得容易。其缺点是增加新的数据结构变得困难。访问者模式比较复杂，当真正需要它的时候才考虑使用它。</p><p>访问者模式的5和角色</p><ul><li><p>Visitor（抽象访问者）角色：声明了一个或者多个方法操作，形成所有的具体访问者角色必须实现的接口。</p></li><li><p>ConcreteVisitor（具体访问者）角色：实现抽象访问者所声明的接口，也就是抽象访问者所声明的各个访问操作。</p></li><li><p>Element（抽象元素）：声明一个接受操作，接受一个访问者对象作为一个参数。</p></li><li><p>ConcreteElement（具体元素）：实现了抽象节点所规定的接受操作。</p></li><li><p>ObjectStructure（结构对象）：有如下的责任，可以遍历结构中的所有元素。</p></li></ul><p>在本例中，把厕所当做抽象元素，具体元素有男厕所和女厕所，由此可见数据结构时稳定的，因为生理性别只有男女之分。进了厕所可以解大便解小便，洗手，抽烟，想干啥干啥。因此操作是多变的，这些操作都相当于是“放松”，把“放松”抽象成Visitor, 用代码模拟如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Visitor</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Rest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getManRest</span><span class="params">(ManRoom manRoom)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getWomanRest</span><span class="params">(WomanRoom womanRoom)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteVisitor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stool</span> <span class="keyword">extends</span> <span class="title">Rest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManRest</span><span class="params">(ManRoom manRoom)</span> </span>&#123;</span><br><span class="line">        System.out.println(manRoom.getClass().getSimpleName() + <span class="string">"上大便"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomanRest</span><span class="params">(WomanRoom womanRoom)</span> </span>&#123;</span><br><span class="line">        System.out.println(womanRoom.getClass().getSimpleName() + <span class="string">"上大便"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pee</span> <span class="keyword">extends</span> <span class="title">Rest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManRest</span><span class="params">(ManRoom manRoom)</span> </span>&#123;</span><br><span class="line">        System.out.println(manRoom.getClass().getSimpleName() + <span class="string">"上小便"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomanRest</span><span class="params">(WomanRoom womanRoom)</span> </span>&#123;</span><br><span class="line">        System.out.println(womanRoom.getClass().getSimpleName() + <span class="string">"上小便"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Element</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Toilet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Rest rest)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteElementA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManRoom</span> <span class="keyword">extends</span> <span class="title">Toilet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Rest rest)</span> </span>&#123;</span><br><span class="line">        rest.getManRest(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteElementB</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WomanRoom</span> <span class="keyword">extends</span> <span class="title">Toilet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Rest rest)</span> </span>&#123;</span><br><span class="line">        rest.getWomanRest(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ObjectStructure</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToiletManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Toilet&gt; elements = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Toilet toilet)</span> </span>&#123;</span><br><span class="line">        elements.add(toilet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Toilet toilet)</span> </span>&#123;</span><br><span class="line">        elements.remove(toilet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Rest rest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Toilet toilet : elements) &#123;</span><br><span class="line">            toilet.accept(rest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ToiletManager toiletManager = <span class="keyword">new</span> ToiletManager();</span><br><span class="line">        toiletManager.attach(<span class="keyword">new</span> ManRoom());</span><br><span class="line">        toiletManager.attach(<span class="keyword">new</span> WomanRoom());</span><br><span class="line"></span><br><span class="line">        Stool stool = <span class="keyword">new</span> Stool();</span><br><span class="line">        toiletManager.display(stool);</span><br><span class="line"></span><br><span class="line">        Pee pee = <span class="keyword">new</span> Pee();</span><br><span class="line">        toiletManager.display(pee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p><strong>描述：包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用，从而使它们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用，保证这些作用可以彼此独立的变化。</strong></p><p><img src="/2019/07/25/mediator-visitor/中介者模式.png" alt="中介者模式"></p><p>在开发中会遇到这样的场景：尽管将系统分割成许多对象通常可增加其可复用性，但是对象间相互连接的激增又会降低其可复用性了，大量的连接使得一个对象不可能在没有其他对象的支持下工作，系统表现为一个不可分割的整体，所以，对系统的行为进行任何较大的改动就十分困难了，这就是中介者模式解决问题的背景。</p><p>中介者模式的4个角色</p><ul><li><p>Mediator（抽象中介者）：它定义一个接口，该接口用于与各同事对象之间进行通信。</p></li><li><p>ConcreteMediator（具体中介者）：它是抽象中介者的子类，通过协调各个同事对象来实现协作行为，它维持了对各个同事对象的引用。</p></li><li><p>Colleague（抽象同事类）：它定义各个同事类公有的方法，并声明了一些抽象方法来供子类实现，同时它维持了一个对抽象中介者类的引用，其子类可以通过该引用来与中介者通信。</p></li><li><p>ConcreteColleague（具体同事类）：它是抽象同事类的子类；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中声明的抽象方法。</p></li></ul><p>中介者模式的核心在于中介者类的引入，在中介者模式中，中介者类承担了两方面的职责：</p><ul><li><p>中转作用（结构性）：通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，可通过中介者来实现间接调用。该中转作用属于中介者在结构上的支持。</p></li><li><p>协调作用（行为性）：中介者可以更进一步的对同事之间的关系进行封装，同事可以一致的和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。</p></li></ul><p>在本例中，买家和买家交易时使用移动支付，以前是使用纸币进行面对面交易。现在可以通过支付宝、微信转账交易，这些移动支付平台就相当于中介者。而支付宝、微信就是具体中介者了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mediator</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MobilePayment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Account account, <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Colleague</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> MobilePayment mobilePayment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(MobilePayment mobilePayment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobilePayment = mobilePayment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteColleague</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seller</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Seller</span><span class="params">(MobilePayment mobilePayment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mobilePayment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        mobilePayment.transfer(<span class="keyword">this</span>, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖家收到 "</span> + amount + <span class="string">" 元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Buyer</span><span class="params">(MobilePayment mobilePayment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mobilePayment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        mobilePayment.transfer(<span class="keyword">this</span>, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"买家收到 "</span> + amount + <span class="string">" 元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteMediator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alipay</span> <span class="keyword">extends</span> <span class="title">MobilePayment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Buyer buyer;</span><br><span class="line">    <span class="keyword">private</span> Seller seller;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuyer</span><span class="params">(Buyer buyer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buyer = buyer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeller</span><span class="params">(Seller seller)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seller = seller;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Account account, <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (account <span class="keyword">instanceof</span> Buyer) &#123;</span><br><span class="line">            seller.notify(amount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buyer.notify(amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Alipay alipay = <span class="keyword">new</span> Alipay();</span><br><span class="line"></span><br><span class="line">        Buyer buyer = <span class="keyword">new</span> Buyer(alipay);</span><br><span class="line">        Seller seller = <span class="keyword">new</span> Seller(alipay);</span><br><span class="line"></span><br><span class="line">        alipay.setBuyer(buyer);</span><br><span class="line">        alipay.setSeller(seller);</span><br><span class="line"></span><br><span class="line">        buyer.transfer(<span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中介者模式很容易在系统中应用，也很容易误用。当系统中出现了“多对多”交互复杂的对象群时，不要急于使用中介者模式，而要先反思你的系统在设计上是不是合理。</p><p>优点：Mediator的出现减少了各个Colleague的耦合，使得可以独立改变和复用各个Colleague,由于把对象如何协作进行了抽象，将中介者作为一个独立的概念并将其封装在一个对象中，这样关注的对象就从对象各自本身转移到它们之间的交互上来，也就是以更宏观的角度去看待系统。</p><p>缺点：由于ConcreteMediator控制了集中化，于是就把交互复杂性变为中介者复杂性，这就使得中介者会变得比任何一个ConcreteColleague都复杂。</p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/wwwdc1012/article/details/83389158" target="_blank" rel="noopener">https://blog.csdn.net/wwwdc1012/article/details/83389158</a></li><li><a href="https://xuwujing.blog.csdn.net/article/details/83588888" target="_blank" rel="noopener">https://xuwujing.blog.csdn.net/article/details/83588888</a></li><li>《大话设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次学了解释器模式和迭代器模式，都不是用得很多，而且都比较好理解，就不水博客了&lt;/p&gt;
&lt;h3 id=&quot;访问者模式&quot;&gt;&lt;a href=&quot;#访问者模式&quot; class=&quot;headerlink&quot; title=&quot;访问者模式&quot;&gt;&lt;/a&gt;访问者模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;描述：封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/25/mediator-visitor/访问者模式.png&quot; alt=&quot;访问者模式&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="DesignPatterns" scheme="http://yoursite.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之命令模式和责任链模式</title>
    <link href="http://yoursite.com/2019/07/24/command-responsibility/"/>
    <id>http://yoursite.com/2019/07/24/command-responsibility/</id>
    <published>2019-07-24T07:44:02.383Z</published>
    <updated>2019-07-24T08:52:29.267Z</updated>
    
    <content type="html"><![CDATA[<p>终于来到了行为型模式的学习，这一部分是最多的，慢慢啃吧</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p><strong>描述：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</strong></p><p><img src="/2019/07/24/command-responsibility/命令模式.png" alt="命令模式"><br><a id="more"></a><br>对请求排队或记录请求日志，以及支持可撤销操作时，“行为请求者”和“行为实现者”紧耦合是不合适的。<br>命令模式用来解决“行为请求者”和“行为实现者”紧耦合的问题。</p><p>命令模式的4个角色</p><ul><li><p>Command（命令接口）：用来声明操作的接口。</p></li><li><p>ConcreteCommand（具体命令类）：将一个接收者对象绑定于一个动作，调用接收者相应的操作。</p></li><li><p>Receiver（命令执行对象）：知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接收者。</p></li><li><p>Invoker（命令请求对象）：用于执行这个请求，可以动态的对命令进行控制。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Receiver</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barbecuer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bakeMutton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烤羊肉串"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bakeChickenWing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烤鸡翅"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Command</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Barbecuer barbecuer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(Barbecuer barbecuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.barbecuer = barbecuer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuteOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteCommand</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakeMuttonOrder</span> <span class="keyword">extends</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BakeMuttonOrder</span><span class="params">(Barbecuer barbecuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(barbecuer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuteOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        barbecuer.bakeMutton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakeChickenWingOrder</span> <span class="keyword">extends</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BakeChickenWingOrder</span><span class="params">(Barbecuer barbecuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(barbecuer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuteOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        barbecuer.bakeChickenWing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Invoker</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (order <span class="keyword">instanceof</span> BakeChickenWingOrder) &#123;</span><br><span class="line">            System.out.println(<span class="string">"服务员：鸡翅没有了！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            orders.add(order);</span><br><span class="line">            System.out.println(<span class="string">"增加订单："</span> + order.getClass().getSimpleName() + <span class="string">"，时间："</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        orders.remove(order);</span><br><span class="line">        System.out.println(<span class="string">"取消订单："</span> + order.getClass().getSimpleName() + <span class="string">"，时间："</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Order order : orders) &#123;</span><br><span class="line">            order.excuteOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Barbecuer barbecuer=<span class="keyword">new</span> Barbecuer();</span><br><span class="line">        Order order1=<span class="keyword">new</span> BakeChickenWingOrder(barbecuer);</span><br><span class="line">        Order order2=<span class="keyword">new</span> BakeMuttonOrder(barbecuer);</span><br><span class="line">        Order order3=<span class="keyword">new</span> BakeMuttonOrder(barbecuer);</span><br><span class="line"></span><br><span class="line">        Waiter waiter=<span class="keyword">new</span> Waiter();</span><br><span class="line">        waiter.setOrder(order1);</span><br><span class="line">        waiter.setOrder(order2);</span><br><span class="line">        waiter.setOrder(order3);</span><br><span class="line">        waiter.notifyOrders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结命令模式的优点  </p><ol><li>能较容易地设计一个命令队列</li><li>在需要的情况下，可以较容易地将命令记入日志</li><li>允许接收请求的一方决定是否要否决请求</li><li>能容易地实现对请求的撤销和重做</li><li>由于添加新的具体命令类不影响其他类，因此增加新的具体命令类很容易</li></ol><p>最关键的优点是：<strong>把请求一个操作的对象与知道怎么执行一个操作的对象分隔开</strong></p><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p><strong>描述：为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</strong></p><p><img src="/2019/07/24/command-responsibility/责任链模式.png" alt="责任链模式"></p><p>责任链模式的2个角色</p><ul><li><p>Handler（抽象处理者）：它定义了一个处理请求的接口，一般设计为抽象类，由于不同的具体处理者处理请求的方式不同，因此在其中定义了抽象请求处理方法。因为每一个处理者的下家还是一个处理者，因此在抽象处理者中定义了一个抽象处理者类型的对象，作为其对下家的引用。通过该引用，处理者可以连成一条链。</p></li><li><p>ConcreteHandler（具体处理者）：它是抽象处理者的子类，可以处理用户请求，在具体处理者类中实现了抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者；在具体处理者中可以访问链中下一个对象，以便请求的转发。</p></li></ul><p>纯的责任链模式：</p><p>一个具体处理者对象只能在两个行为中选择一个：要么承担全部责任，要么将责任推给下家，不允许出现某一个具体处理者对象在承担了一部分或全部责任后<br>又将责任向下传递的情况<br>一个请求必须被某一个处理者对象所接收，不能出现某个请求未被任何一个处理者对象处理的情况</p><p>不纯的责任链模式：</p><p>允许某个请求被一个具体处理者部分处理后再向下传递<br>或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求<br>而且一个请求可以最终不被任何处理者对象所接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    String type;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(String type, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Handler</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Manager superior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuperior</span><span class="params">(Manager superior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.superior = superior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestApplications</span><span class="params">(Request request)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteHandler</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonManager</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestApplications</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.type.equals(<span class="string">"请假"</span>) &amp;&amp; request.number &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请求："</span> + request.type + <span class="string">", 数量："</span> + request.number + <span class="string">", 被"</span>+name+<span class="string">"批准。"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (superior != <span class="keyword">null</span>) &#123;</span><br><span class="line">                superior.requestApplications(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestApplications</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.type.equals(<span class="string">"请假"</span>) &amp;&amp; request.number &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请求："</span> + request.type + <span class="string">", 数量："</span> + request.number + <span class="string">", 被"</span>+name+<span class="string">"批准。"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (superior != <span class="keyword">null</span>) &#123;</span><br><span class="line">                superior.requestApplications(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneralManager</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestApplications</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.type.equals(<span class="string">"请假"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请求："</span> + request.type + <span class="string">", 数量："</span> + request.number + <span class="string">", 被"</span>+name+<span class="string">"批准。"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (superior != <span class="keyword">null</span>) &#123;</span><br><span class="line">                superior.requestApplications(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Responsibility</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CommonManager commonManager=<span class="keyword">new</span> CommonManager(<span class="string">"commonManager"</span>);</span><br><span class="line">        Director director=<span class="keyword">new</span> Director(<span class="string">"director"</span>);</span><br><span class="line">        GeneralManager generalManager=<span class="keyword">new</span> GeneralManager(<span class="string">"generalManager"</span>);</span><br><span class="line"></span><br><span class="line">        commonManager.setSuperior(director);</span><br><span class="line">        director.setSuperior(generalManager);</span><br><span class="line"></span><br><span class="line">        Request request1=<span class="keyword">new</span> Request(<span class="string">"请假"</span>, <span class="number">1</span>);</span><br><span class="line">        Request request2=<span class="keyword">new</span> Request(<span class="string">"请假"</span>, <span class="number">4</span>);</span><br><span class="line">        Request request3=<span class="keyword">new</span> Request(<span class="string">"请假"</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        commonManager.requestApplications(request1);</span><br><span class="line">        commonManager.requestApplications(request2);</span><br><span class="line">        commonManager.requestApplications(request3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>责任链有什么好处？</p><p>当客户提交一个请求时，请求时沿链传递直至有一个ConcreteHandler对象负责处理它，这就使得接收者和发送者都没有对方的明确信息，且链中的对象自己也不知道链的结构，结果是责任链可以简化对象的相互连接，它们仅保持一个指向其后继者的引用，而不需要保持它所有候选接收者的引用。可以随时地增加或修改处理一个请求的结构，增强了独享指派职责的灵活性。</p><p>但一个请求有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。</p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/wwwdc1012/article/details/83592323" target="_blank" rel="noopener">https://blog.csdn.net/wwwdc1012/article/details/83592323</a></li><li><a href="https://xuwujing.blog.csdn.net/article/category/7784915" target="_blank" rel="noopener">https://xuwujing.blog.csdn.net/article/category/7784915</a></li><li>《大话设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于来到了行为型模式的学习，这一部分是最多的，慢慢啃吧&lt;/p&gt;
&lt;h3 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;描述：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/24/command-responsibility/命令模式.png&quot; alt=&quot;命令模式&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="DesignPatterns" scheme="http://yoursite.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式、组合模式和代理模式</title>
    <link href="http://yoursite.com/2019/07/21/flyweight-composite-proxy/"/>
    <id>http://yoursite.com/2019/07/21/flyweight-composite-proxy/</id>
    <published>2019-07-21T10:22:04.924Z</published>
    <updated>2019-07-22T16:43:37.114Z</updated>
    
    <content type="html"><![CDATA[<p>结构型模式还剩下这三个，一起记录下来吧</p><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p><strong>描述：通过共享以便有效的支持大量小颗粒对象。</strong></p><p><img src="/2019/07/21/flyweight-composite-proxy/享元模式.png" alt="享元模式"><br><a id="more"></a><br>享元模式可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来表示数据。如果能发现这些实例除了几个参数外基本都是相同的，有时就能够受大幅度地减少需要实例化的类的数量。如果能把那些参数移到类实例的外面，在方法调用时将他们传递进来，就可以通过共享大幅度减少单个实例的数目。</p><p>什么时候用享元模式？<br>如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销时就应该考虑使用；还有就是对象的大多数状态可以是外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象，此时可以考虑使用享元模式。</p><p>享元模式的4个角色</p><ul><li><p>Flyweight（抽象享元类）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</p></li><li><p>ConcreteFlyweight（具体享元类）：它实现了抽象享元类，其实例称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</p></li><li><p>UnsharedConcreteFlyweight（非共享具体享元类）：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</p></li><li><p>FlyweightFactory（享元工厂类）：享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中，享元池一般设计为一个存储“键值对”的集合（也可以是其他类型的集合），可以结合工厂模式进行设计；当用户请求一个具体享元对象时，享元工厂提供一个存储在享元池中已创建的实例或者创建一个新的实例（如果不存在的话），返回新创建的实例并将其存储在享元池中。</p></li></ul><p>以棋类运动为例，棋子可以看作抽象享元类，围棋棋子，五子棋棋子，象棋棋子这些可以看作是具体享元类。各类棋子除了具体位置(在此处以(x,y)坐标表示)这一外部状态不同，其他属性都相同。此时就可以使用享元模式，比如在一局围棋游戏中，只有黑棋和白棋这两种具体享元类，大大减少了重复生成棋子的内存开销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Flyweight</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Piece</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setPosition</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteFlyweight</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoPieces</span> <span class="keyword">extends</span> <span class="title">Piece</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoPieces</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPosition</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        System.out.println(type + <span class="string">" 下在("</span> + x + <span class="string">","</span> + y + <span class="string">")处。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FlyweightFactory</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PieceFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Piece&gt; pieceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Piece <span class="title">getPiece</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pieceMap.containsKey(key)) &#123;</span><br><span class="line">            pieceMap.put(key, <span class="keyword">new</span> GoPieces(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pieceMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberOfPiecesType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pieceMap.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PieceFactory pieceFactory = <span class="keyword">new</span> PieceFactory();</span><br><span class="line">        Piece black1 = pieceFactory.getPiece(<span class="string">"黑棋"</span>);</span><br><span class="line">        black1.setPosition(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Piece write1 = pieceFactory.getPiece(<span class="string">"白棋"</span>);</span><br><span class="line">        write1.setPosition(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        Piece black2 = pieceFactory.getPiece(<span class="string">"黑棋"</span>);</span><br><span class="line">        black2.setPosition(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Piece write2 = pieceFactory.getPiece(<span class="string">"白棋"</span>);</span><br><span class="line">        write2.setPosition(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        Piece black3 = pieceFactory.getPiece(<span class="string">"黑棋"</span>);</span><br><span class="line">        black3.setPosition(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(pieceFactory.getNumberOfPiecesType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p><strong>描述：把多个对象组成树状结构来表示局部与整体，这样用户可以一样的对待单个对象和对象的组合。</strong></p><p><img src="/2019/07/21/flyweight-composite-proxy/组合模式.png" alt="组合模式"></p><p>组合模式要解决的是<strong>整体和部分可以被一致对待</strong>的问题</p><p>何时使用组合模式？<br>需求中是体现部分与整体层次的结构时，希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑用组合模式。</p><p>组合模式的3个角色</p><ul><li><p>Component（抽象构件）：它可以是接口或抽象类，为叶子构件和容器构件对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现。在抽象构件中定义了访问及管理它的子构件的方法，如增加子构件、删除子构件、获取子构件等。</p></li><li><p>Leaf（叶子构件）：它在组合结构中表示叶子节点对象，叶子节点没有子节点，它实现了在抽象构件中定义的行为。对于那些访问及管理子构件的方法，可以通过异常等方式进行处理。</p></li><li><p>Composite（容器构件）：它在组合结构中表示容器节点对象，容器节点包含子节点，其子节点可以是叶子节点，也可以是容器节点，它提供一个集合用于存储子节点，实现了在抽象构件中定义的行为，包括那些访问及管理子构件的方法，在其业务方法中可以递归调用其子节点的业务方法。</p></li></ul><p>组合模式的关键是定义了一个抽象构件类，它既可以代表叶子，又可以代表容器，而客户端针对该抽象构件类进行编程，无须知道它到底表示的是叶子还是容器，可以对其进行统一处理。同时容器对象与抽象构件类之间还建立一个聚合关联关系，在容器对象中既可以包含叶子，也可以包含容器，以此实现递归组合，形成一个树形结构。</p><p>透明模式与安全模式</p><ul><li><p>透明模式在Component中声明所有管理子对象的方法，这样做的好处是叶结点和枝结点对于外界没有区别，它们具备完全一致的行为接口，但Leaf本身不具备add()、remove()功能，所有实现它们是没有意义的。</p></li><li><p>安全模式在Component接口中不去声明管理子对象的方法，那么子类Leaf就不需要实现它们，而是在Composite中实现，不过由于不够透明，叶结点和枝结点有不同的接口，客户端调用时要做相应的判断。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Component</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Company company)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company company)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Composite</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCompany</span> <span class="keyword">extends</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Company&gt; companyList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCompany</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        companyList.add(company);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        companyList.remove(company);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; depth; ++i) &#123;</span><br><span class="line">            System.out.print(<span class="string">'-'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">for</span> (Company component : companyList) &#123;</span><br><span class="line">            component.display(depth + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Company component : companyList) &#123;</span><br><span class="line">            component.work();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Leaf</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HRDepartment</span> <span class="keyword">extends</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HRDepartment</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; depth; ++i) &#123;</span><br><span class="line">            System.out.print(<span class="string">'-'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 员工招聘培训管理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinanceDepartment</span> <span class="keyword">extends</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinanceDepartment</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; depth; ++i) &#123;</span><br><span class="line">            System.out.print(<span class="string">'-'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 公司财务收支管理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteCompany root = <span class="keyword">new</span> ConcreteCompany(<span class="string">"北京总公司"</span>);</span><br><span class="line">        root.add(<span class="keyword">new</span> HRDepartment(<span class="string">"总公司人力资源部"</span>));</span><br><span class="line">        root.add(<span class="keyword">new</span> FinanceDepartment(<span class="string">"总公司财务部"</span>));</span><br><span class="line"></span><br><span class="line">        ConcreteCompany comp = <span class="keyword">new</span> ConcreteCompany(<span class="string">"上海华东分公司"</span>);</span><br><span class="line">        comp.add(<span class="keyword">new</span> HRDepartment(<span class="string">"华东分公司人力资源部"</span>));</span><br><span class="line">        comp.add(<span class="keyword">new</span> FinanceDepartment(<span class="string">"华东分公司财务部"</span>));</span><br><span class="line">        root.add(comp);</span><br><span class="line"></span><br><span class="line">        ConcreteCompany comp1 = <span class="keyword">new</span> ConcreteCompany(<span class="string">"南京办事处"</span>);</span><br><span class="line">        comp.add(<span class="keyword">new</span> HRDepartment(<span class="string">"南京办事处人力资源部"</span>));</span><br><span class="line">        comp.add(<span class="keyword">new</span> FinanceDepartment(<span class="string">"南京办事处财务部"</span>));</span><br><span class="line">        comp.add(comp1);</span><br><span class="line"></span><br><span class="line">        root.display(<span class="number">1</span>);</span><br><span class="line">        root.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><strong>描述：为其他对象提供一个代理以控制对这个对象的访问。</strong></p><p><img src="/2019/07/21/flyweight-composite-proxy/代理模式.png" alt="代理模式"></p><p>代理模式的3个角色  </p><ul><li><p>Subject（抽象角色）：通过接口或抽象类声明真实角色实现的业务方法。</p></li><li><p>Proxy（代理角色）：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。</p></li><li><p>RealSubject（真实角色）：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</p></li></ul><p>代理模式又分为静态代理和动态代理</p><p>先来举个例子，电脑和手机都可以联网，现在有个代理VPN也可以联网，我们用VPN代理实现翻墙功能，用代码实现就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Subject</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Networking</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RealSubject</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">implements</span> <span class="title">Networking</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 已联网，但访问网站受限。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">implements</span> <span class="title">Networking</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmartPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmartPhone</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 已联网，但访问网站受限。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Proxy</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerVPNProxy</span> <span class="keyword">implements</span> <span class="title">Networking</span> </span>&#123;</span><br><span class="line">    Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerVPNProxy</span><span class="params">(Computer computer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = computer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.connection();</span><br><span class="line">        System.out.println(<span class="string">"已翻墙，开始网上冲浪吧！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处用了静态代理的实现方式，可以看到实现起来非常简单，但有个缺点，如果我们不确定需要代理某个真实类的时候会比较麻烦，而且在类过多的时候，目标对象与代理对象都要维护，会使系统复杂度提升，维护起来也更加麻烦。这时我们就可以使用动态代理来进行解决。</p><p>这里记录两种动态代理的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK动态代理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicVPNProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Networking networking;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicVPNProxy</span><span class="params">(Networking networking)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.networking = networking;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"connection"</span>.equals(method.getName())) &#123;</span><br><span class="line">            result = method.invoke(networking, args);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"已翻墙，开始网上冲浪吧！"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//cglib代理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CglibVPNProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;<span class="comment">//注意 target最好写一个无参构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CglibVPNProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getVPNInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1工具类</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//3设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//4创建子类(代理对象)</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"connection"</span>.equals(method.getName())) &#123;</span><br><span class="line">            result = method.invoke(target, objects);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"已翻墙，开始网上冲浪吧！"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer(<span class="string">"IBN-5100"</span>);</span><br><span class="line">        computer.connection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态代理</span></span><br><span class="line">        Networking computerVPN = <span class="keyword">new</span> ComputerVPNProxy(computer);</span><br><span class="line">        computerVPN.connection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK动态代理</span></span><br><span class="line">        Networking smartPhoneVPN = (Networking) java.lang.reflect.Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Networking.class&#125;, <span class="keyword">new</span> DynamicVPNProxy(<span class="keyword">new</span> SmartPhone(<span class="string">"IPhoneX"</span>)));</span><br><span class="line">        smartPhoneVPN.connection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Cglib动态代理</span></span><br><span class="line">        Networking smartPhoneVPN1 = (Networking) <span class="keyword">new</span> CglibVPNProxy(<span class="keyword">new</span> SmartPhone(<span class="string">"MI6"</span>)).getVPNInstance();</span><br><span class="line">        smartPhoneVPN1.connection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/wwwdc1012/article/category/7152423" target="_blank" rel="noopener">https://blog.csdn.net/wwwdc1012/article/category/7152423</a></li><li>《大话设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结构型模式还剩下这三个，一起记录下来吧&lt;/p&gt;
&lt;h3 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;描述：通过共享以便有效的支持大量小颗粒对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/21/flyweight-composite-proxy/享元模式.png&quot; alt=&quot;享元模式&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="DesignPatterns" scheme="http://yoursite.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰模式和外观模式</title>
    <link href="http://yoursite.com/2019/07/19/decorator-facade/"/>
    <id>http://yoursite.com/2019/07/19/decorator-facade/</id>
    <published>2019-07-19T06:24:08.650Z</published>
    <updated>2019-07-19T08:36:04.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p><strong>描述：向某个对象动态地添加更多的功能。修饰模式是除类继承外另一种扩展功能的方法。</strong><br><img src="/2019/07/19/decorator-facade/装饰模式.png" alt="装饰模式"><br><a id="more"></a><br>什么时候使用装饰模式？<br>装饰模式是为已有功能动态添加更多功能的一种方式，当系统需要新功能时，是向旧类添加新的代码。这些新加的代码通常装饰了原有类的<strong>核心职责或主要行为</strong>，在主类中加入了新的字段、方法、逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足一些只在特殊需求下才会执行的行为。<br>装饰模式提供了很好的解决方案，它把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，因此，当需要执行特殊行为时，客户端代码就可以根据需要有选择地，按顺序地包装对象。<br>装饰模式有4个重要角色</p><ul><li><p>Component（抽象构件）：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理未被装饰的对象以及装饰之后的对象，实现客户端的透明操作。</p></li><li><p>ConcreteComponent（具体构件）：它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）。</p></li><li><p>Decorator（抽象装饰类）：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰的目的。</p></li><li><p>ConcreteDecorator（具体装饰类）：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。</p></li></ul><p>如果只有一个ConcreteComponent，没有Component，那Decorator可以是ConcreteComponent的一个子类，同理，如果只有一个ConcreteDecorator，那就没有必要建立一个单独的Decorator类，而可以把Decorator和ConcreteDecorator在责任合并成一个类</p><p>举个茶饮品的例子，茶饮品可以分为奶茶和果茶两大主类，我们可以给饮品加料，既可以不加，也可以来份全家福，还可以只选其中几种加料。像这种多变的需求，就可以用装饰模式来装饰茶饮品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Component</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteComponent</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> <span class="keyword">extends</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"奶茶"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitTea</span> <span class="keyword">extends</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"果茶"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Decorator</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStuff</span> <span class="keyword">extends</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Tea tea;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddStuff</span><span class="params">(Tea tea)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tea = tea;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tea.getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tea.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pearl</span> <span class="keyword">extends</span> <span class="title">AddStuff</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pearl</span><span class="params">(Tea tea)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"珍珠"</span> + <span class="keyword">super</span>.getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.cost() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pudding</span> <span class="keyword">extends</span> <span class="title">AddStuff</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pudding</span><span class="params">(Tea tea)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"布丁"</span> + <span class="keyword">super</span>.getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.cost() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tea tea1 = <span class="keyword">new</span> Pudding(<span class="keyword">new</span> Pearl(<span class="keyword">new</span> MilkTea()));</span><br><span class="line">        Tea tea2 = <span class="keyword">new</span> Pearl(<span class="keyword">new</span> Pudding(<span class="keyword">new</span> FruitTea()));</span><br><span class="line">        System.out.println(<span class="string">"点了一杯 "</span> + tea1.getType() + <span class="string">"，售价"</span> + tea1.cost() + <span class="string">"元。"</span>);</span><br><span class="line">        System.out.println(<span class="string">"点了一杯 "</span> + tea2.getType() + <span class="string">"，售价"</span> + tea2.cost() + <span class="string">"元。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：装饰模式的优点是把类中的装饰功能从类中搬移出去，简化原有类，有效地把类中的核心职责和装饰功能区分开了。</p><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p><strong>描述：为子系统中的一组接口提供一个一致的界面， 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</strong></p><p><img src="/2019/07/19/decorator-facade/外观模式.png" alt="外观模式"></p><p>外观模式是一种使用频率非常高的结构型设计模式，它通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。</p><p>外观模式又称为门面模式，它是一种对象结构型模式。外观模式是迪米特法则的一种具体实现，通过引入一个新的外观角色可以降低原有系统的复杂度，同时降低客户类与子系统的耦合度。</p><p>外观模式包含如下2个角色：</p><ul><li><p>Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。</p></li><li><p>SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</p></li></ul><p>外观模式的目的不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。</p><p>外观模式的本质是：<strong>封装交互，简化调用</strong>。</p><p>什么时候用外观模式？  </p><ul><li><p>在设计初期阶段，应该有意识的将不同的两个层分离，比如dao和service之间分层，service和controller之间分层。</p></li><li><p>在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加Facade可以提供一个简单的接口，减少它们之间的依赖。</p></li><li><p>维护遗留的大型系统时，可能这个系统以及很难维护和扩展了，增加Facade，来提供设计粗糙或高复杂的遗留代码比较清晰简单的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作。</p></li></ul><p>外观模式十分简单，又常用，是很好的设计模式。因此直接上代码，不多BB</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fund fund = <span class="keyword">new</span> Fund();</span><br><span class="line">        fund.buyFund();</span><br><span class="line">        fund.sellFund();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Facade</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fund</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stock stock;</span><br><span class="line">    <span class="keyword">private</span> NationalDebt nationalDebt;</span><br><span class="line">    <span class="keyword">private</span> Realty realty;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stock = <span class="keyword">new</span> Stock();</span><br><span class="line">        nationalDebt = <span class="keyword">new</span> NationalDebt();</span><br><span class="line">        realty = <span class="keyword">new</span> Realty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyFund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stock.buy();</span><br><span class="line">        nationalDebt.buy();</span><br><span class="line">        realty.buy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellFund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stock.sell();</span><br><span class="line">        nationalDebt.sell();</span><br><span class="line">        realty.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SubSystem</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖股票"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"买股票"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NationalDebt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖国债"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"买国债"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Realty</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖房产"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"买房产"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/wwwdc1012/article/details/82764333" target="_blank" rel="noopener">https://blog.csdn.net/wwwdc1012/article/details/82764333</a></li><li>《大话设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;装饰模式&quot;&gt;&lt;a href=&quot;#装饰模式&quot; class=&quot;headerlink&quot; title=&quot;装饰模式&quot;&gt;&lt;/a&gt;装饰模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;描述：向某个对象动态地添加更多的功能。修饰模式是除类继承外另一种扩展功能的方法。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2019/07/19/decorator-facade/装饰模式.png&quot; alt=&quot;装饰模式&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="DesignPatterns" scheme="http://yoursite.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式和桥接模式</title>
    <link href="http://yoursite.com/2019/07/17/adapter-bridge/"/>
    <id>http://yoursite.com/2019/07/17/adapter-bridge/</id>
    <published>2019-07-17T11:35:00.693Z</published>
    <updated>2019-07-17T13:23:49.225Z</updated>
    
    <content type="html"><![CDATA[<p>学完了创建型模式，该学结构型模式了。</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p><strong>描述：将某个类的接口转换成客户端期望的另一个接口表示。适配器模式可以消除由于接口不匹配所造成的类兼容性问题。</strong><br><img src="/2019/07/17/adapter-bridge/适配器模式.jpg" alt="适配器模式"><br><a id="more"></a></p><ul><li>解决什么问题？<br>在软件开发中，系统的数据和行为都正确，但接口不符，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况，比如在需要对早期代码复用一些功能等应用上很有实际价值。</li><li>何时使用适配器？<br>在你想使用一些已经存在的类，这些类的作用和复用环境里其他的类功能相似，但它们的接口不同时，考虑使用适配器模式。客户端代码可以统一调用同一接口，这样更简单、直接、紧凑。</li><li>注意事项：<br>其实使用适配器模式是无奈之举，有点“亡羊补牢”的感觉。我们不应该在设计阶段使用它，因为在初期，没有必要把功能相似的类的接口设计得不同，就算发现有设计不同的地方，也应该及时重构统一接口。当我们因不同开发人员、产品、厂家而造成功能类似而接口不同的情况，<strong>双方都不太容易修改自己的接口时</strong>，才是适配器模式大展拳脚的时候。</li></ul><p>举个翻译器的例子，我们用两种语言说同一句话时，意思是一样的，但说出来，发出的声音肯定有很大区别。这时，我们可以把这句话的意思看作是“功能类似”，而说出的话语看作是“接口不同”，我们假设双方都不能听懂对方的语言，这时候就需要一个翻译器了，它充当适配器的角色。<br>用代码表示如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Target</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speakChinese</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteTarget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseSpeaker</span> <span class="keyword">implements</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speakChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你吃午饭了吗"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adaptee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JapaneseSpeaker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speakJapanese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"昼食はもう食べましたか"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在这个中国人想听懂日本人说的话，需要一个翻译器(Adapter),它有两种实现方式</p><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Adapter by class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JapaneseToChineseTranslatorByClass</span> <span class="keyword">extends</span> <span class="title">JapaneseSpeaker</span> <span class="keyword">implements</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speakChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.speakJapanese();</span><br><span class="line">        System.out.println(<span class="string">"经过翻译，中国人听得懂，表达的意思一样"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Adapter by interface</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JapaneseToChineseTranslatorByInterface</span> <span class="keyword">implements</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JapaneseSpeaker japaneseSpeaker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JapaneseToChineseTranslatorByInterface</span><span class="params">(JapaneseSpeaker japaneseSpeaker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.japaneseSpeaker = japaneseSpeaker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speakChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        japaneseSpeaker.speakJapanese();</span><br><span class="line">        System.out.println(<span class="string">"经过翻译，中国人听得懂，表达的意思一样"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他们的调用是这样子的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chinese chinese = <span class="keyword">new</span> ChineseSpeaker();</span><br><span class="line">        chinese.speakChinese();</span><br><span class="line"></span><br><span class="line">        Chinese chinese1 = <span class="keyword">new</span> JapaneseToChineseTranslatorByInterface(<span class="keyword">new</span> JapaneseSpeaker());</span><br><span class="line">        chinese1.speakChinese();</span><br><span class="line"></span><br><span class="line">        Chinese chinese2 = <span class="keyword">new</span> JapaneseToChineseTranslatorByClass();</span><br><span class="line">        chinese2.speakChinese();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，客户端看到的都是Chinese类型的引用，都调用了统一的speakChinese()接口。<br>总结：如果能事先预防接口不同问题，不匹配的问题就不会发生，小接口不统一，及时重构问题不至于扩大，只有碰到无法改变原有设计和代码的情况时，才考虑用适配器，如果无视场合盲目使用，其实是本末倒置了。</p><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p><strong>描述：将一个抽象与实现解耦，以便两者可以独立的变化。</strong><br><img src="/2019/07/17/adapter-bridge/桥接模式.png" alt="桥接模式"><br>字面的意思解读就是通过一个中间的桥梁对两边的东西进行关联起来，但是关联的两者之间又不相互影响。<br>《大话设计模式》在讲到此节时提到了合成/复用原则</p><blockquote><p>合成/复用原则：优先使用对象的合成或聚合，而不是类继承。</p></blockquote><p>合成和聚合都是关联的特殊种类</p><blockquote><p>合成：表示一种强的“拥有”关系，体现了严格的部分和整体关系，部分和整体的生命周期一样。</p></blockquote><blockquote><p>聚合：表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。</p></blockquote><p>如下图所示<br><img src="/2019/07/17/adapter-bridge/合成聚合.jpg" alt="合成聚合"><br>盲目地使用继承会造成麻烦，其本质是，继承是一种强耦合结构，父类变，子类必须变。所以我们在用继承时，一定要在是“is-a”的关系再考虑使用，而不是任何时候都去使用。<br>用更详细的语言解释是：<br><strong>对象的继承关系是在编译时就定好了，所以无法在运行时改变从父类继承的实现。子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类的变化。当需要复用子类时，如果继承下来的实现不适合新的需求，则父类必须重写或被其他更适合的类替换。这种依赖关系限制了灵活性并最终限制了复用性</strong></p><p>举个游戏中的例子，DNF中鬼剑士的武器是剑类。鬼剑士可以转职成4个职业：剑魂，狂战士，阿修罗，鬼泣。剑类也有巨剑，太刀，钝器，短剑之分。这时候就可以把鬼剑士和剑类当做抽象类(虽然鬼剑士不转职时也是一个具体的角色，但在这个语境中我们姑且当他是抽象类)，不同的职业可以使用不同的剑，不同的剑也可以被不同的职业使用。这时候就可以使用桥接模式把角色和武器任意组合了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Implementor</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sword</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteImplementor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreatSword</span> <span class="keyword">implements</span> <span class="title">Sword</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用巨剑挥砍"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TooKnife</span> <span class="keyword">implements</span> <span class="title">Sword</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用太刀突刺"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Abstraction</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Slayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Sword sword;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSword</span><span class="params">(Sword sword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sword = sword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RefinedAbstraction</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BladeMaster</span> <span class="keyword">extends</span> <span class="title">Slayer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"剑魂"</span>);</span><br><span class="line">        sword.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Berserker</span> <span class="keyword">extends</span> <span class="title">Slayer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"狂战士"</span>);</span><br><span class="line">        sword.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Slayer bladeMaster = <span class="keyword">new</span> BladeMaster();</span><br><span class="line">        bladeMaster.setSword(<span class="keyword">new</span> TooKnife());</span><br><span class="line">        bladeMaster.attack();</span><br><span class="line"></span><br><span class="line">        Slayer berserker = <span class="keyword">new</span> Berserker();</span><br><span class="line">        berserker.setSword(<span class="keyword">new</span> GreatSword());</span><br><span class="line">        berserker.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>做个总结：对于桥接模式，通俗的理解就是：实现系统可能有多个角度分类，每一种分类都可能发生变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/qazwsxpcm/article/details/81948697" target="_blank" rel="noopener">https://blog.csdn.net/qazwsxpcm/article/details/81948697</a></li><li>《大话设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学完了创建型模式，该学结构型模式了。&lt;/p&gt;
&lt;h3 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;描述：将某个类的接口转换成客户端期望的另一个接口表示。适配器模式可以消除由于接口不匹配所造成的类兼容性问题。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2019/07/17/adapter-bridge/适配器模式.jpg&quot; alt=&quot;适配器模式&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="DesignPatterns" scheme="http://yoursite.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式和原型模式(深/浅复制问题)</title>
    <link href="http://yoursite.com/2019/07/15/builder-deep_clone/"/>
    <id>http://yoursite.com/2019/07/15/builder-deep_clone/</id>
    <published>2019-07-15T08:27:04.310Z</published>
    <updated>2019-07-22T16:44:11.940Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>建造者模式和原型模式属于创建型模式，建造者模式和工厂模式有相似之处，他们都可以动态获得不同产品的类型，这些具体产品都来源于一个产品父类，而建造者模式更加注重产品内部组件的装配过程。原型模式则涉及到对象的深复制和浅复制的问题。</p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p><strong>描述：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</strong><br><img src="/2019/07/15/builder-deep_clone/建造者模式.png" alt="建造者模式"><br><a id="more"></a><br>建造者模式又称生成器模式，可以将一个产品的内部表象与产品的生成过程分割开来，从而使一个建造过程生成具有不同内部表象的产品对象。如果我们用了建造者模式，那么用户只需指定建造的类型就可以得到它们，而具体的建造细节就不需要知道了。</p><p>举个例子，玩RPG游戏时要创建一个角色然后开始探险。角色有很多类型：战士，射手，法师，刺客等等。他们都有一些相似的共有属性，比如，用什么武器，应该穿什么防具，初始血量、法力值等等。所以，<strong>创建这些角色的过程都大体相似</strong>，依次设置这些共有属性的值。对于玩家而言，他们只需要在创建角色页面选择自己要玩的角色，并不关心后台是如何生成这些角色的。</p><p>定义一个角色类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Character</span> </span>&#123;</span><br><span class="line">    String weapon;</span><br><span class="line">    String guard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(String weapon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGuard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> guard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGuard</span><span class="params">(String guard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.guard = guard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这个角色的武器是："</span> + weapon + <span class="string">"，防具精通："</span> + guard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>角色建造器接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CharacterBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWeapon</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildGuard</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Character <span class="title">createCharacter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个接口规定了建造器需要设置角色的武器和防具，具体怎么设置，则交给子类具体的建造器。</p><p>具体角色的建造器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwordsmanBuilder</span> <span class="keyword">implements</span> <span class="title">CharacterBuilder</span> </span>&#123;</span><br><span class="line">    Character character = <span class="keyword">new</span> Character();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        character.setWeapon(<span class="string">"残破的剑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildGuard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        character.setGuard(<span class="string">"重甲"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Character <span class="title">createCharacter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> character;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GunnerBuilder</span> <span class="keyword">implements</span> <span class="title">CharacterBuilder</span> </span>&#123;</span><br><span class="line">    Character character = <span class="keyword">new</span> Character();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        character.setWeapon(<span class="string">"没子弹的枪"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildGuard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        character.setGuard(<span class="string">"皮甲"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Character <span class="title">createCharacter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> character;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一个建造者模式核心的类，Director。用来指挥具体的建造过程，至于建造的是什么角色，它不用关心，由调用者决定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharacterPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Character <span class="title">createCharacter</span><span class="params">(CharacterBuilder characterBuilder)</span> </span>&#123;</span><br><span class="line">        characterBuilder.buildWeapon();</span><br><span class="line">        characterBuilder.buildGuard();</span><br><span class="line">        <span class="keyword">return</span> characterBuilder.createCharacter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CharacterPanel characterPanel = <span class="keyword">new</span> CharacterPanel();</span><br><span class="line">        Character swordsman = characterPanel.createCharacter(<span class="keyword">new</span> SwordsmanBuilder());</span><br><span class="line">        Character gunner = characterPanel.createCharacter(<span class="keyword">new</span> GunnerBuilder());</span><br><span class="line">        swordsman.show();</span><br><span class="line">        gunner.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单的介绍了下建造者模式的运作原理，可以概况为这4点:</p><ul><li><p>Builder：指定一个抽象的接口，规定该产品所需实现部件的创建，并不涉及具体的对象部件的创建。</p></li><li><p>ConcreteBuilder：需实现Builder接口，并且针对不同的逻辑，进行不同方法的创建，最终提供该产品的实例。</p></li><li><p>Director：用来创建复杂对象的部分，对该部分进行完整的创建或者按照一定的规则进行创建。</p></li><li><p>Product：示被构造的复杂对象。</p></li></ul><p>什么时候使用建造者模式?<br>当要创建一些复杂的对象，这些对象内部构建间的建造顺序通常是稳定的，但对象内部的构建通常面临着复杂的变化时。</p><p>优点：<br>使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以若需要改变一个产品的内部表示，只需要再定义一个具体的建造者ConcreteBuilder就可以了。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><strong>描述：用原型实例指定创建对象的种类，并且通过拷贝这些原型,创建新的对象。</strong><br><img src="/2019/07/15/builder-deep_clone/原型模式.png" alt="原型模式"><br>原型模式是从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节。<br>举个简历的例子：简历上有各自个人信息，其中工作经历这个信息又可以包含更具体的信息，如工作时间，工作地点等，因此可以封装成一个类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String sex;</span><br><span class="line">    String age;</span><br><span class="line">    WorkExperience workExperience;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        workExperience = <span class="keyword">new</span> WorkExperience();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonalInfo</span><span class="params">(String sex, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkExperience</span><span class="params">(String workDate, String company)</span> </span>&#123;</span><br><span class="line">        workExperience.workDate = workDate;</span><br><span class="line">        workExperience.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Resume&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", workExperience="</span> + workExperience +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Resume resume = (Resume) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">if</span> (workExperience != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resume.workExperience = (WorkExperience) workExperience.clone();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resume;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkExperience</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    String workDate;</span><br><span class="line">    String company;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"WorkExperience&#123;"</span> +</span><br><span class="line">                <span class="string">"workDate='"</span> + workDate + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果现在我想要很多份简历，这些简历除了工作经历属性可以因投递公司的不同而有详有略外，其他信息都一样。如果每创建一份简历都要new一次，都要执行一次构造函数，假如构造函数的执行时间很长，那么多次执行构造函数这个初始化操作的效率就很低了。  这时候就可以使用原型模式，实际上java有个Cloneable接口，重写clone()方法即可实现原型模式。原型模式的基础实现可自行了解。  </p><p>主程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Resume resume1 = <span class="keyword">new</span> Resume(<span class="string">"bxy"</span>);</span><br><span class="line">        resume1.setPersonalInfo(<span class="string">"male"</span>, <span class="string">"21"</span>);</span><br><span class="line">        resume1.setWorkExperience(<span class="string">"2017-2021"</span>, <span class="string">"NUIST"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(resume1.toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Resume resume2 = (Resume) resume1.clone();</span><br><span class="line">            resume2.setWorkExperience(<span class="string">"2017-2019"</span>,<span class="string">"A公司"</span>);</span><br><span class="line"></span><br><span class="line">            Resume resume3 = (Resume) resume1.clone();</span><br><span class="line">            resume3.setWorkExperience(<span class="string">"2017-2018"</span>,<span class="string">"B公司"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用场景：<br>当需要创建多个对象，而这些对象有很多初始化信息都不变。<br>原型模式的好处是不用重新初始化对象，而是动态地获得对象运行时的状态。</p><p>既然原型模式是为了克隆对象而生的，一个对象的属性有基本类型(值类型)和非基本类型(引用类型)。对于非基本类型属性的复制就引出了深复制和浅复制的问题。</p><h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><blockquote><p>创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p></blockquote><p>在上述例子中，WorkExperience是非基本属性，在Resume对象中存的是引用。浅复制的Resume2和原来的Resume1中的WorkExperience都指向同一个对象。</p><h4 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h4><blockquote><p>创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p>在一些特定的场合，我们会需要深复制。即希望Resume2和Resume1中的WorkExperience指向不同的对象。为了做到这点，可以让待复制对象的非基本类型的对象也实现Cloneable接口，也可以使用对象流将对象写出流再读出。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深复制实现1</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Resume resume = (Resume) <span class="keyword">super</span>.clone();</span><br><span class="line">    <span class="keyword">if</span> (workExperience != <span class="keyword">null</span>) &#123;</span><br><span class="line">        resume.workExperience = (WorkExperience) workExperience.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深复制实现2</span></span><br><span class="line">ByteArrayOutputStream byteOut=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream objOut=<span class="keyword">new</span> ObjectOutputStream(byteOut);</span><br><span class="line">objOut.writeObject(resume1);</span><br><span class="line"></span><br><span class="line">ByteArrayInputStream byteIn=<span class="keyword">new</span> ByteArrayInputStream(byteOut.toByteArray());</span><br><span class="line">ObjectInputStream objIn=<span class="keyword">new</span> ObjectInputStream(byteIn);</span><br><span class="line">Resume resume3=(Resume)objIn.readObject();</span><br><span class="line">System.out.println(resume1.workExperience == resume3.workExperience);</span><br></pre></td></tr></table></figure></p><p>在选择深复制方法时，应根据对象的复杂程度，如引用类型属性是否有多层引用类型属性关系。如果对象只有一层或者两层引用类型的属性，让引用类型的对象也实现Cloneable接口较为方便，反之则使用对象流。</p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/qazwsxpcm/article/details/81292529" target="_blank" rel="noopener">https://blog.csdn.net/qazwsxpcm/article/details/81292529</a></li><li><a href="https://www.cnblogs.com/liqiangchn/p/9465186.html" target="_blank" rel="noopener">https://www.cnblogs.com/liqiangchn/p/9465186.html</a></li><li>《大话设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;建造者模式和原型模式属于创建型模式，建造者模式和工厂模式有相似之处，他们都可以动态获得不同产品的类型，这些具体产品都来源于一个产品父类，而建造者模式更加注重产品内部组件的装配过程。原型模式则涉及到对象的深复制和浅复制的问题。&lt;/p&gt;
&lt;h3 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;描述：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2019/07/15/builder-deep_clone/建造者模式.png&quot; alt=&quot;建造者模式&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="DesignPatterns" scheme="http://yoursite.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式：简单工厂&amp;工厂方法&amp;抽象工厂</title>
    <link href="http://yoursite.com/2019/07/14/factory/"/>
    <id>http://yoursite.com/2019/07/14/factory/</id>
    <published>2019-07-14T08:16:47.293Z</published>
    <updated>2019-07-14T08:25:24.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>设计模式有3大类，分为：<strong>创建型模式</strong>、<strong>结构型模式</strong>和<strong>行为型模式</strong>。工厂模式属于创建型模式，创建型模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。<br><a id="more"></a></p><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p><strong>描述：定义一个类用于创建父类相同的子类对象，由传入参数决定创建哪个子类。</strong><br><img src="/2019/07/14/factory/简单工厂.jpg" alt="简单工厂"><br>举个例子，我喜欢玩游戏。定义一个Game接口，让具体的游戏去实现这个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeartStone</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"炉石传说，启动！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gwent</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"昆特牌，启动！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们要开始玩了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> HeartStone();</span><br><span class="line">        game.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在假设我们的程序是个大型系统，提供游戏启动的代理功能，一开始我们玩的是炉石传说，因此项目中有很多地方的代码都使用 Game game = new HeartStone(); 这样的语句来启动游戏。<br>某天，我觉得炉石传说随机性太大了，辣鸡炉石！咱们去玩昆特牌吧！那么问题来了，想更换启动的游戏，我就得将整个系统的每一处Game game = new HeartStone(); 改成 Game game = new Gwent(); 可见工作量是十分庞大的。<br>简单工厂模式就是为了解决这类问题的：具体玩什么游戏应该是随时变动的需求，不应该在程序中写死具体实例化哪个游戏子类。<br>现在添加一个游戏工厂类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HeartStone = <span class="string">"HeartStone"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String Gwent = <span class="string">"Gwent"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Game <span class="title">playGame</span><span class="params">(String game)</span> </span>&#123;</span><br><span class="line">        Game myGame = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (game) &#123;</span><br><span class="line">            <span class="keyword">case</span> HeartStone:</span><br><span class="line">                myGame = <span class="keyword">new</span> HeartStone();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Gwent:</span><br><span class="line">                myGame = <span class="keyword">new</span> Gwent();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myGame;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主程序改为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = GameFactory.playGame(<span class="string">"Gwent"</span>);</span><br><span class="line">        game.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，我们想启动什么游戏，只需要改动playGame中的参数，而这个参数是一个字符串变量，这就意味着，我们还可以以配置文件的方式为这个字符串变量赋值，最终做到，不改动任何一处代码，只修改配置文件中的游戏信息，就可以切换具体实例化哪个游戏。</p><p>简单工厂模式的最大优点在于工厂类中包含了必要的逻辑判断(switch)，根据客户端的选择动态实例化相关的 类，对于客户端来说，去除了与具体产品的依赖。</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p><strong>描述：定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。</strong><br><img src="/2019/07/14/factory/工厂方法.jpg" alt="工厂方法"><br>在简单工厂模式中，我们发现在添加子类的时候，相应的也需要在工厂类中添加一个判断分支(多加一个case)，是违背了开放-封闭原则的。而工厂方法模式就是主要解决这个问题的。</p><blockquote><p>开放-封闭原则：软件实体(类、模块、函数等)应该可以扩展，但是不可修改。</p></blockquote><p>回到玩游戏的例子，现在我又想玩LOL了，现在我需要添加一个LOL类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LOL</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"英雄联盟，启动！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在简单工厂模式下，还需要改动GameFactory的代码，添加一个Case,这样修改了源代码，违背了开闭原则。现在将简单工厂模式改成工厂方法模式，把GameFactory改成接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Game <span class="title">playGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeartStoneFactory</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeartStone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GwentFactory</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gwent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，想添加LOL这个游戏，只需要再添加一个工厂类即可，不用<strong>修改</strong>代码，而是<strong>扩展</strong>代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LOLFactory</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LOL();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主程序为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameFactory gameFactory = <span class="keyword">new</span> LOLFactory();</span><br><span class="line">        Game game = gameFactory.playGame();</span><br><span class="line">        game.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到使用工厂方法模式之后，扩展性变高了，如果想增加一个游戏，只要扩展一个游戏工厂类就可以。但是随之而来的是在系统中增加了复杂度，每增加一个游戏时，都需要增加一个游戏类和工厂类。</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p><strong>描述：为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。</strong><br><img src="/2019/07/14/factory/抽象工厂.png" alt="抽象工厂"><br>抽象工厂模式是一种特殊的工厂方法模式。在上面的玩游戏例子中，游戏工厂接口(GameFactory)的子类，只实例化一种游戏父类(Game)。这时工厂方法模式就可以满足需求。但我们知道，游戏是分为很多种类型的，如MOBA、RPG、TCG等等。<br>现在我们把Game接口拆分成RPGGame接口和CardGame接口，需求变为：GameFactory的子类可以实例化多种游戏父类了(RPGGame、CardGame)。这时候就要用到抽象工厂模式。</p><p>原先我们讨论游戏时，说的是一个很宽泛的概念，我只知道你想玩游戏，不知道你想玩什么类型的游戏。现在给你两个选项：角色扮演游戏和卡牌游戏。有两家知名游戏厂商，波兰蠢驴和暴雪，他们都有角色扮演类游戏和卡牌类游戏。<br>那么众所周知，蠢驴的RPG游戏有巫师系列，卡牌游戏是昆特牌，暴雪的RPG游戏有魔兽世界，卡牌游戏有炉石传说。这些具体的游戏都叫做<strong>产品</strong> 而游戏这个大类则是<strong>产品族</strong>，巫师和昆特牌是蠢驴的产品族；魔兽世界和炉石传说是暴雪的产品族。<br>抽象工厂模式就是描述它们之间的关系的：将同一类的产品子类归为一类，让他们继承同一个接口，(巫师和魔兽世界都是RPG，让它们都继承RPG接口)，然后将不同类的产品归为一族，让不同类的产品都可以被一个工厂子类实例化(魔兽世界和炉石传说是不同类的游戏，但都可以被暴雪公司实例化)。<br>通过代码直观展示：<br>游戏类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RPGGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CardGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeartStone</span> <span class="keyword">implements</span> <span class="title">CardGame</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"炉石传说，启动！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gwent</span> <span class="keyword">implements</span> <span class="title">CardGame</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"昆特牌，启动！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WOW</span> <span class="keyword">implements</span> <span class="title">RPGGame</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"魔兽世界，启动！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Witcher</span> <span class="keyword">implements</span> <span class="title">RPGGame</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"巫师，启动！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>游戏工厂类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">RPGGame <span class="title">playRPGGame</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">CardGame <span class="title">playCardGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDProjektRed</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RPGGame <span class="title">playRPGGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Witcher();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CardGame <span class="title">playCardGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gwent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blizzard</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RPGGame <span class="title">playRPGGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WOW();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CardGame <span class="title">playCardGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeartStone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameFactory gameFactory1 = <span class="keyword">new</span> CDProjektRed();</span><br><span class="line">        GameFactory gameFactory2 = <span class="keyword">new</span> Blizzard();</span><br><span class="line">        RPGGame game1 = gameFactory1.playRPGGame();</span><br><span class="line">        CardGame game2 = gameFactory1.playCardGame();</span><br><span class="line">        RPGGame game3 = gameFactory2.playRPGGame();</span><br><span class="line">        CardGame game4 = gameFactory2.playCardGame();</span><br><span class="line">        game1.play();</span><br><span class="line">        game2.play();</span><br><span class="line">        game3.play();</span><br><span class="line">        game4.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，我们的游戏启动代理系统的功能就被进一步完善了，如果你是蠢驴的舔狗，你只想代理启动蠢驴的游戏，只需要修改一处代码GameFactory gameFactory = new CDProjektRed(); 就可以一键设置为蠢驴游戏全家桶，对于客户端来说，它们并不知道自己会启动哪个厂商的游戏，因为这对它们是透明的，客户端只知道自己启动了RPGGame和CardGame. 如果哪天你又变成暴雪舔狗了，也只需要改动一处代码，客户端就会启动暴雪的游戏族。</p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/qazwsxpcm/article/details/81141325" target="_blank" rel="noopener">https://blog.csdn.net/qazwsxpcm/article/details/81141325</a></li><li>《大话设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;设计模式有3大类，分为：&lt;strong&gt;创建型模式&lt;/strong&gt;、&lt;strong&gt;结构型模式&lt;/strong&gt;和&lt;strong&gt;行为型模式&lt;/strong&gt;。工厂模式属于创建型模式，创建型模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="DesignPatterns" scheme="http://yoursite.com/tags/DesignPatterns/"/>
    
  </entry>
  
  <entry>
    <title>初始Netty —— 实现简单的C/S通信</title>
    <link href="http://yoursite.com/2019/04/28/first_Netty/"/>
    <id>http://yoursite.com/2019/04/28/first_Netty/</id>
    <published>2019-04-28T12:08:33.730Z</published>
    <updated>2019-04-29T11:02:27.785Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：<br>Netty是Java的网络编程框架，既然是框架的学习，不免会碰到很多分支的知识和不熟悉的名词。这就需要不断的做“下潜”，耐心搜索，不求甚解，等到大致熟悉之后再去逐一深究。因此有些概念作者也不能做出详细解释，请参考贴出的相关文章或自行搜索以解决疑惑。<br><a id="more"></a></p><h3 id="什么是Netty"><a href="#什么是Netty" class="headerlink" title="什么是Netty"></a>什么是Netty</h3><p>网上很多文章都有作解释。以作者的使用体验来说，Netty是封装了 Java socket nio 来进行网络编程的工具。说到网络编程，大二软工的软件工程实训就有这个小课题，当时作者是用Java socket io来写，还没用到nio呢，就是参照网上的例子手动模拟通信过程，自己用最简单的 <strong>阻塞I/O</strong> 的模式写了一个Thread类来处理所有不同种类的请求，由于需求简单，尚能完成。 想要模拟效果更自然一点就要用 <strong>非阻塞I/O</strong> 模式，而nio就是用来写非阻塞I/O的api。但是nio的编写对java程序员是有比较高的要求的。Netty就可以简化这一系列操作。<br><!--more--></p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>贴几个比较靠谱的博客，不求甚解，大致了解一下就好。<br>关于NIO：<br><a href="https://www.jianshu.com/p/3cec590a122f" target="_blank" rel="noopener">https://www.jianshu.com/p/3cec590a122f</a>  (推荐，也包括I/O模型)<br><a href="https://my.oschina.net/andylucc/blog/614295" target="_blank" rel="noopener">https://my.oschina.net/andylucc/blog/614295</a><br>关于I/O模型：<br><a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003063859</a></p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>java JDK1.8 + IDEA + maven + Netty 4.1.6<br>maven依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.1.6.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>C/S通信：C是客户端，S是服务端。在IDEA控制台开启服务端接收客户端的信息String, 并返回一个“hi!”+String，客户端收到服务端的信息后在控制台上输出。</p><h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h3><p>分为服务端和客户端两部分，各自又有一个处理连接逻辑的代码</p><h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.Delimiters;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;  <span class="comment">//1.设置服务端端口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();  <span class="comment">//2.创建 EventLoopGroup</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 客户端的是Bootstrap，服务端的则是    ServerBootstrap。</span></span><br><span class="line"><span class="comment">             **/</span></span><br><span class="line">            ServerBootstrap sbs = <span class="keyword">new</span> ServerBootstrap();  <span class="comment">//3.创建 ServerBootstrap</span></span><br><span class="line">            sbs.group(group)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)  <span class="comment">//4.指定使用 NIO 的传输 Channel</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline ph = ch.pipeline();</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * Netty中的编码/解码器，通过他你能完成字节与pojo、pojo与pojo的相互转换，</span></span><br><span class="line"><span class="comment">                            * 从而达到自定义协议的目的。</span></span><br><span class="line"><span class="comment">                            * 下面是以("\n")为结尾分割的 解码器</span></span><br><span class="line"><span class="comment">                            * */</span></span><br><span class="line">                            ph.addLast(<span class="string">"framer"</span>, <span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">8192</span>, Delimiters.lineDelimiter()))</span><br><span class="line">                                    .addLast(<span class="string">"decoder"</span>, <span class="keyword">new</span> StringDecoder())</span><br><span class="line">                                    .addLast(<span class="string">"encoder"</span>, <span class="keyword">new</span> StringEncoder())  <span class="comment">//解码和编码，应和客户端一致</span></span><br><span class="line">                                    .addLast(<span class="string">"handler"</span>, <span class="keyword">new</span> EchoServerHandler());  <span class="comment">//5.添加 EchoServerHandler 到 Channel 的 ChannelPipeline</span></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture cf = sbs.bind(<span class="keyword">this</span>.port).sync();  <span class="comment">//6.设置socket地址使用所选的端口 并且 绑定的服务器，sync 等待服务器关闭</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"服务端启动成功..."</span>);</span><br><span class="line"></span><br><span class="line">            cf.channel().closeFuture().sync();  <span class="comment">//7.关闭 channel 和 块，直到它被关闭</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();  <span class="comment">//8.关闭 EventLoopGroup，释放所有资源</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> EchoServer(<span class="number">65535</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这一段代码：<br><img src="http://blog.duohuo.org/wp-content/uploads/2019/01/2d5cd63552e26e1c12d11902c2a05bdc.png" alt><br>这是关键所在，其余代码基本上是套路代码，按部就班写就可以。<br>关键在于此处出现了：</p><ul><li>用ChannelPipeline引用了SocketChannel的pipeline，原因在于ChannelPipeline是用于存放ChannelHandler的容器，而接下来的解码编码操作和自定义的逻辑处理类都要涉及到ChannelHandler的子类<br>它们之间的关系可以用下图表示：</li></ul><p><img src="http://blog.duohuo.org/wp-content/uploads/2019/01/27d52ce0891ede08b68a32fcc9281ae2.png" alt></p><ul><li><p>Encoder(编码器)和Decoder(解码器)，属于Codec框架的内容，大致意思是：此处描述了服务端和客户端之间传输了什么类型的数据，这里要传输String就用到了StringDecoder/Encode   当然也可以传输其他类型的数据，详情参考这篇博客：<a href="https://www.jianshu.com/p/fd815bd437cd" target="_blank" rel="noopener">https://www.jianshu.com/p/fd815bd437cd</a></p></li><li><p>注释5.处的EchoServerHandler是自定义的类，可以看作是一种“规则”，规定了服务端以什么方式处理客户端发来的数据。</p></li></ul><h4 id="服务端处理连接的代码"><a href="#服务端处理连接的代码" class="headerlink" title="服务端处理连接的代码"></a>服务端处理连接的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 收到消息时，返回信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端接受的消息 : "</span> + msg);  <span class="comment">// 收到消息直接打印输出</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"quit"</span>.equals(msg))&#123;  <span class="comment">//服务端断开的条件</span></span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.writeAndFlush(<span class="string">"hi! "</span>+msg+<span class="string">"\n"</span>);  <span class="comment">// 返回客户端消息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 建立连接时，返回消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接的客户端地址:"</span> + ctx.channel().remoteAddress());</span><br><span class="line">        ctx.writeAndFlush(<span class="string">"客户端"</span>+ InetAddress.getLocalHost().getHostName() + <span class="string">"成功与服务端建立连接！ \n"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.Delimiters;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;  <span class="comment">//ip地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;     <span class="comment">//端口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"localhost"</span>, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.host = host;</span><br><span class="line">         <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();  <span class="comment">//1.创建 EventLoopGroup</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Netty创建全部都是实现自AbstractBootstrap。</span></span><br><span class="line"><span class="comment">             * 客户端的是Bootstrap，服务端的则是    ServerBootstrap。</span></span><br><span class="line"><span class="comment">             **/</span></span><br><span class="line">            Bootstrap bs = <span class="keyword">new</span> Bootstrap();  <span class="comment">//2.创建 Bootstrap</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"客户端成功启动..."</span>);</span><br><span class="line"></span><br><span class="line">            bs.group(group)  <span class="comment">//3.指定 NioEventLoopGroup 来处理客户端事件。</span></span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;  <span class="comment">//4.指定使用 NIO 的传输 Channel</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline ph = ch.pipeline();</span><br><span class="line">                            ph.addLast(<span class="string">"framer"</span>, <span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">8192</span>, Delimiters.lineDelimiter()))</span><br><span class="line">                                    .addLast(<span class="string">"decoder"</span>, <span class="keyword">new</span> StringDecoder())</span><br><span class="line">                                    .addLast(<span class="string">"encoder"</span>, <span class="keyword">new</span> StringEncoder())  <span class="comment">// 解码和编码，应和服务端一致</span></span><br><span class="line">                                    .addLast(<span class="string">"handler"</span>, <span class="keyword">new</span> EchoClientHandler());  <span class="comment">//5.当建立一个连接和一个新的通道时，创建添加到 EchoClientHandler 实例 到 channel pipeline</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            Channel ch = bs.connect(<span class="keyword">this</span>.host, <span class="keyword">this</span>.port).sync().channel();  <span class="comment">//6.设置服务器的ip和端口，并且连接到远程; 等待连接完成</span></span><br><span class="line"></span><br><span class="line">            Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"请输入要发送的信息："</span>);</span><br><span class="line">                String str=in.next();</span><br><span class="line">                <span class="comment">//连接后发送数据</span></span><br><span class="line">                ch.writeAndFlush(str+ <span class="string">"\r\n"</span>);</span><br><span class="line">                System.out.println(<span class="string">"客户端发送数据:"</span>+str);</span><br><span class="line">                <span class="keyword">if</span> (str.equals(<span class="string">"quit"</span>))<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();  <span class="comment">//8.关闭线程池和释放所有资源</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> EchoClient(<span class="string">"127.0.0.1"</span>, <span class="number">65535</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端和服务端代码样式基本一致，有几个关键点都已注释<br><img src="http://blog.duohuo.org/wp-content/uploads/2019/01/cefccb1c91e7593d6278109de2c6a89f.png" alt><br>此处以不断向客户端发送信息，输入“quit”终止连接。</p><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>先运行服务端再运行客户端<br>服务端：<br><img src="http://blog.duohuo.org/wp-content/uploads/2019/01/781c5efd2db39cccd9f49ba70af253bc.png" alt><br>客户端1:<br><img src="http://blog.duohuo.org/wp-content/uploads/2019/01/6288b3985b7af37895fcf2f1b63be69a.png" alt><br>客户端2：<br><img src="http://blog.duohuo.org/wp-content/uploads/2019/01/3db8b4f3bc3dd1ce8d37dcc875dfc5c9.png" alt></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.cnblogs.com/liuming1992/p/4758532.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuming1992/p/4758532.html</a><br><a href="https://blog.csdn.net/qazwsxpcm/article/details/77750865" target="_blank" rel="noopener">https://blog.csdn.net/qazwsxpcm/article/details/77750865</a><br><a href="https://www.jianshu.com/p/b9f3f6a16911" target="_blank" rel="noopener">https://www.jianshu.com/p/b9f3f6a16911</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：&lt;br&gt;Netty是Java的网络编程框架，既然是框架的学习，不免会碰到很多分支的知识和不熟悉的名词。这就需要不断的做“下潜”，耐心搜索，不求甚解，等到大致熟悉之后再去逐一深究。因此有些概念作者也不能做出详细解释，请参考贴出的相关文章或自行搜索以解决疑惑。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用slf4j+logback配合AOP做日志记录</title>
    <link href="http://yoursite.com/2019/04/28/SpringBoot_logger_AOP/"/>
    <id>http://yoursite.com/2019/04/28/SpringBoot_logger_AOP/</id>
    <published>2019-04-28T11:42:06.303Z</published>
    <updated>2019-04-29T11:02:59.046Z</updated>
    
    <content type="html"><![CDATA[<p>需要大致了解：java日志基础，如核心组件Loggers,Appenders,Layouts的用处、SpringAOP概念</p><h3 id="为什么需要日志"><a href="#为什么需要日志" class="headerlink" title="为什么需要日志"></a>为什么需要日志</h3><p>当应用程序部署到服务器上运行时，用户在使用过程中可能会出现各种错误。这时应用程序将错误信息生成日志，就方便了开发人员快速定位错误和根源，从而进行有针对的维护。所以，在大型应用程序中，日志记录是必不可少的。<br><a id="more"></a></p><h3 id="选择日志框架"><a href="#选择日志框架" class="headerlink" title="选择日志框架"></a>选择日志框架</h3><p>目前市面上可供选择的日志框架非常多，如JCL、SLF4J、Jboss-logging、jUL、log4j、log4j2、logback等，首先要分清楚 [日志抽象层] 和 [日志实现]。   这两者的关系可以参考设计模式中的“门面模式”。  我们在开发中调用日志记录方法时，不应直接调用日志实现类的方法，而是调用日志抽象层的方法。这样方便解耦，以后想更换别的日志实现时，可以直接改动配置文件的信息，<strong>而不用修改一行代码</strong>。 那么如何选择日志框架呢？</p><ul><li>日志抽象层：JCL（Jakarta Commons Logging), SLF4j（Simple Logging Facade for Java）, jboss-logging</li><li>日志实现：Log4j, JUL（java.util.logging）, Log4j2,  Logback</li></ul><p>关于如何选择网络上有很多文章分析，在此不赘述。结论就是SLF4J更受开发者青睐，事实上《阿里java开发手册》上也规定：<em>应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架<br>SLF4J中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</em><br>至于选择日志实现，log4j是很常用的，但其作者又写了log4j的升级版logback，相比log4j有更好的性能。有诸多理由让我们选择logback，使用好logback关键的一点就是配置好logback.xml文件，可参阅<a href="https://www.cnblogs.com/warking/p/5710303.html" title="logback使用和配置详解" target="_blank" rel="noopener">logback使用和配置详解</a></p><h4 id="maven引入"><a href="#maven引入" class="headerlink" title="maven引入"></a>maven引入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringBoot已默认使用slf4j和logback  无需引入对应依赖。</strong></p><h3 id="如何插入日志记录"><a href="#如何插入日志记录" class="headerlink" title="如何插入日志记录"></a>如何插入日志记录</h3><p>使用SpringAOP，目的是让开发者专注于业务逻辑而无需关心在哪里插入日志，并且可以降低日志记录操作对业务代码的侵入性。<br>这里我们使用 AspectJ 的几个注解来写一个切面类TestAspect.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.demo.annotation.RequestColor;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"testAspect"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TestAspect.class); </span><br><span class="line">    <span class="comment">//controller包切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.example.demo.controller.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">controllerPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TestController切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.example.demo.controller.TestController.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testControllerPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体方法 ayahiro 切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.example.demo.controller.TestController.ayahiro()))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ayahiroPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"testControllerPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"form: TestAspect----&gt;&gt;"</span>);</span><br><span class="line">        String className=joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        String methodName=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"doBefore拦截了"</span>+className+<span class="string">"."</span>+methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(value = <span class="string">"@annotation(requestColor)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(JoinPoint joinPoint, <span class="keyword">final</span> RequestColor requestColor)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"form: TestAspect----&gt;&gt;"</span>);</span><br><span class="line">        String className=joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        String methodName=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"doAfter拦截了"</span>+className+<span class="string">"."</span>+methodName);</span><br><span class="line">        System.out.println(<span class="string">"requestType: "</span>+ requestColor.type());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"ayahiroPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        Object re=joinPoint.proceed();  <span class="comment">//执行了ayahiro方法  返回了String</span></span><br><span class="line">        System.out.println(re);</span><br><span class="line">        System.out.println(<span class="string">"form: TestAspect----&gt;&gt;"</span>);</span><br><span class="line">        String className=joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        String methodName=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"doAround拦截了"</span>+className+<span class="string">"."</span>+methodName);</span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"testControllerPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"form: TestAspect----&gt;&gt;"</span>);</span><br><span class="line">        String className=joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        String methodName=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"doAfterReturning拦截了"</span>+className+<span class="string">"."</span>+methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"testControllerPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"form: TestAspect----&gt;&gt;"</span>);</span><br><span class="line">        String className=joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        String methodName=joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"doAfterThrowing拦截了"</span>+className+<span class="string">"."</span>+methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及Controller，有两个返回字符串的测试方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.demo.annotation.RequestColor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestColor</span>(type = RequestColor.Type.YELLOW)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/ayahiro"</span>&#125;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ayahiro</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//int num=2/0;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this ayahiro"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/moonKa"</span>&#125;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">moonKa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this moonKa"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="介绍几个常用的注解"><a href="#介绍几个常用的注解" class="headerlink" title="介绍几个常用的注解"></a>介绍几个常用的注解</h3><ul><li>@Aspect 表明这个类是“切面类”，切面类就是用来定义切点和切点处要增强功能的方法</li><li>@Pointcut 这个注解包含两部分，PointCut表达式和PointCut签名。表达式是用来确定切入点的位置的，说白了就是通过一些规则来确定，哪些方法是要增强的，也就是要拦截哪些方法。注解括号里的部分就是描述切点的位置，有很多种方法来确定，代码中使用的execution表达式是其中的一种，其语法和其他描述方法可自行百度。 签名就是被注解的方法名，签名没有实际用处，只是用来标记一个Pointcut，可以理解成这个切入点的一个记号。</li><li>@Before 顾名思义，即在切入点处方法执行前，执行此方法。同下面的@After，@Around，@AfterReturning， @AfterThrowing注解类似，都是规定了在何时(相对于待增强方法)执行被注解的方法。只不过注解属性有所区别</li><li>JoinPoint 代表着织入增强处理的连接点。注意一点：除了注解@Around的方法外，其他都可以加这个JoinPoint作参数，@Around注解的方法的参数一定要是ProceedingJoinPoint。 JoinPoint包含了几个很有用的参数：<ul><li>Object[] getArgs：返回目标方法的参数</li><li>Signature getSignature：返回目标方法的签名</li><li>Object getTarget：返回被织入增强处理的目标对象</li><li>Object getThis：返回AOP框架为目标对象生成的代理对象</li></ul></li></ul><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>理解了几个注解的作用后，通过运行结果，来看看测试方法都被哪些增强方法拦截了<br>启动后，在浏览器输入<a href="http://localhost:8080/ayahiro" target="_blank" rel="noopener">http://localhost:8080/ayahiro</a><br><img src="http://blog.duohuo.org/wp-content/uploads/2019/03/捕获-300x107.png" alt><br>可以看到，ayahiro()被所有增强方法拦截了。testControllerPointCut()和ayahiroPointCut()拦截不难理解，都前者是划定了一个范围，后者是直接具体定位到该方法。其中@After(value = “@annotation(requestColor)”) 的拦截方式比较特别，是通过自定义注解拦截的，因为ayahiro()被@RequestColor修饰，而@After拦截所有被@RequestColor修饰的方法。<br>输入<a href="http://localhost:8080/moonKa" target="_blank" rel="noopener">http://localhost:8080/moonKa</a><br><img src="http://blog.duohuo.org/wp-content/uploads/2019/03/捕获2-300x49.png" alt><br>可以看到@After就没有拦截moonKa方法，因为该方法没有被@RequestColor修饰。</p><h3 id="使用日志！"><a href="#使用日志！" class="headerlink" title="使用日志！"></a>使用日志！</h3><p>理解了AOP的思想之后，再结合slf4j记录日志就显得非常简单，调用日志方法只需要声明一个 private static final Logger logger = LoggerFactory.getLogger(当前类.class);  再用loger去调用具体的方法：.info()  .warn()  .debug() .error()即可~</p><p>参考资料：<br>    <a href="https://www.cnblogs.com/wangshen31/p/9379197.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangshen31/p/9379197.html</a><br>    <a href="https://blog.csdn.net/caychen/article/details/80112915" target="_blank" rel="noopener">https://blog.csdn.net/caychen/article/details/80112915</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要大致了解：java日志基础，如核心组件Loggers,Appenders,Layouts的用处、SpringAOP概念&lt;/p&gt;
&lt;h3 id=&quot;为什么需要日志&quot;&gt;&lt;a href=&quot;#为什么需要日志&quot; class=&quot;headerlink&quot; title=&quot;为什么需要日志&quot;&gt;&lt;/a&gt;为什么需要日志&lt;/h3&gt;&lt;p&gt;当应用程序部署到服务器上运行时，用户在使用过程中可能会出现各种错误。这时应用程序将错误信息生成日志，就方便了开发人员快速定位错误和根源，从而进行有针对的维护。所以，在大型应用程序中，日志记录是必不可少的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/25/hello-world/"/>
    <id>http://yoursite.com/2019/04/25/hello-world/</id>
    <published>2019-04-25T12:16:47.537Z</published>
    <updated>2019-04-29T11:03:14.446Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/25/hello-world/桌面.jpg" alt="测试图片功能"><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/04/25/hello-world/桌面.jpg&quot; alt=&quot;测试图片功能&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
